// AUTOGENERATED CODE. DO NOT EDIT.

package gendoc

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
)

var embeddedResources = map[string]string{
	"docbook.tmpl": "H4sIAAAAAAAA/+xZ30/bOhR+719h5fEiEq64SFeTW6TBqmkChIDt3U1OW2uOndlOAUX93ycnIb8Tl7UUtvGCZJ/P58TH5/uOa/DpQ8jQCqSigo+df90jBwH3RUD5Yux8vZse/u+cTkaYSE19BpMRQlhTzWByLYUWvmDoXPhxCFwTTQXHXmYdIZQkkvAFIHdKGaj12ixV4BuUMReOksS9IiGs15W1ZnVEJEHuOShf0sisSl1U/F6CUmSRuy6dIxqMnSRxpzFjmWMnc1mNeCH4oiPqUFxjo3PkfiZqSoEFqpjHmswYoLkkIYwdwlgRsAiJfUaU4iRsRS8NKHPb+CDjYiFFHCFfMDV2/qs4RwibyQh8Y7yngV6OnX8cb2vEkXtiBx03IXoJJKjOIISluK/PIISBa/k4SXeLvWzQDbl7jGAYcUFmwIYhlZPsBGKv8Y3Ya20E65kIGusq9V2rBuvGKwU/9N2YUf4dmT/Ay4o2KTEVnVdRNsSegU2G/ZkVJlu2uJ0MyEr/HOYkZvobYbGJanCTfO4DSpKm3UsBSQI86Anayr1Jawqvn0c9+9jLGFHQ2ksJWFK46qEg7acHDdzI3O6JewVKQ4DKCBYOn+yDw2+D5UVOtmX6R6IsiKs4nIF8ZTHoqDJrjl5JENr+zgTXhHLKFw3PpeH5opMdy1+lOtirXXSqprJQeBzu7+qyK6VLk2yTt+N9yNuWumT29hvISZbvnUvJdrTcF6l6aJQP+tp6/UdGUd7mV8ghgxWw/j6NKZ8LGRI2yJb3Tv7eyd87+R/VyWu830R88hq5Bbmi/q89Qbx8D+/o35egl+JtvDG8uGBle0X2Tn8DP2JQGtml6wZUJLiCDaAvrk/5Ue5BnPL8NJQkn91aqp5y2nKfTT9bpt7ehaVhqEhJ54PorU8YkdlVOy20Ol3tl5T+K4qNhh32Extgt/Y2B1qnlJ+0G0mhRT8Tn+4SQpsE9gPODg6sTr6QFbGCrh/1UvA+WKPcWmxvc73sMmlB1Jnel5an1pM+z1foVBkP7cFohEmYFXUWRRt5M5nbCJhlrxfaYmuTqw2m1nna0eErlBxhr/j/xs8AAAD//2FyhLQRGQAA",
	"html.tmpl": "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",
	"markdown.tmpl": "H4sIAAAAAAAA/+RWT2/bPgy9+1PwF/8OKwqn9yLJYe2KYWiLoi12KYZVSZjEgCJ5lhyssPTdB/2xJdtxW2DDLsvFIiXS5HtPdFK4K7nkK07hkq+qPTJJZM5ZMiPAyB7nE8mLyWJ2RhZJkqbwSJYUgW/ggjOJTIqkrkvCtgjTq5yi0Dqp6/83OcXvJhzO5zC9JXvUOoOnuvbrbx/Sdn2SALQ5blAIsjVpAFzANWfbOOiqojQORLbWOk7xiVX734r/KZGJnLMmiekro3hACmHPJgt9ap1huzeS+AHLQ76Ke3u7ruaZwdPDilBSwldCK4THlwJNDcI6s4NxZtI4T5J3MxI4bmvxTM8KIDTfsvmkzLc7OVnMCOxK3MwnqZXDIy/MudlZ4VTRxid1Pb1EsSrzwqhI66iawG3nxaHxIDObMTB3NGu+gelnIq5ypGuTU4FdgrLggIJrskQKCqJIUImCzPzAPaFr+h+oGEOTHzLLpQqdgmrlZd4X0+jsE3faVmGP1zXjyxK6nbg+LnFDKiott1qDN8/B9h1veT3YArsKCYjEAk5U0GxA5iMR5nFb7ZdYjiE0RKkFaRyt8O6jiHUAc7aZIyRnOdv2d1x5fwc6tzX7L8sA2Rr2XqqQZYtIwX60/AH5KjBbb3HwDsBtc6NgvwVhBMYQBDTdNggc01YEw8gkjCE5Okb/XX0+DwT6PKrQwEmHgp46w/flfQJ9RZw3KHd83Wj0Hn9UKGTDzj2KgjOBjT3KTp+Ivtm3VfytMAWMj11fUn/6end3CLvzruZhgPP3x/brd2VAi/DQN4z4K5WmMPxqG3ynhfnT1QB4yyUKUHBxetq4vpADadZ3L3LHmbeO4xsBCcPrceQeuLICvrFg7B9CB8YEzhbQdXkyTMntFSmKeM/UHtuu/sbTovMrAAD//3K8InN6CgAA",
	"scalars.json": "H4sIAAAAAAAA/9yXzW4aMRDH7zzFiFMqBZDSlEa9JZGQOOQEOUWp5GVnvW6NTewxzaqq1HfoG/ZJqt0F1gYvpChVk9zQfHg9v/nPWNx1AL53AAC6C6NJT4sFdj9BN9Uukdg9rV1KE9rSvDbMFot45MzG7XxzciY1o+H52vGFLVk8ZZEvgpyNvaBcq6jLuKRYO0aVowPw47SlxiB1X4lBYFNhYN4q8P1ZrMCwjn9dn1DeNTb13Vq0sGRGsERiT6LilAOqmU6F4n0YK8wyMROoCDJtNh5QyBmJJYJy8wSNhd8/f4HIoNDOQCZQpiAsSPEVZQGkIWdl7DppyaRDewrOItjqYiCUJWRpPwI8uHkDXKgI7iDWh+1Fe6iFIuRo4rC9FB/1leDKzUEbGInH8tcJs2DwwQmD6btDPWi0/sJ6MDw/0IPm5k0PpFY82oT4SPvhu10YWDLCC9huxsBP3+3IXvLuGPlHOLgWMbqoGt0zy/EAgaM06Y4RZQuZmERcXCPu/4jkKET2qN05EVxhCkJRPWt9mOZoEebaIGxGWhZ1Cu6OM+VMgUHuJDNQXcG+7fVoj9qPz855eN7G+VWvwEw8YhqR8aX8xgoLWflqJAWh7cNNgK4G5FbvdLZ6OYAZBJ0RKuAGGaGp484+n128vM35zEqtWEakumKJgud0CGb54B6G+WH4epft/mF/uh7f9tL7Cy29wa2UaC2f8q/Lj2vK9K08eqZfZWlHpiKFbnuCCrecfoFT4/BaMmsHIyZt/XN/twOSTa+hdsDcWQJWd36mFTGh4HY66l2sXq+01NjHXiIILifX4zEQPlJMF+GHGmKhnbdczKc2CZuft3wiZGbJDJwS5ZVj3Ooz4aQqbf98VMrfAXbDig0fpgpgJhFkmCnA4oNDNSvXafvUtNG5KggnLYTu7svjYoR2s55OaR+dqsO9i6vxtEbUue/8CQAA//8z+wC/ohEAAA==",
}

func fetchResource(name string) ([]byte, error) {
	raw, ok := embeddedResources[name]
	if !ok {
		return nil, fmt.Errorf("Could not find resource for '%s'", name)
	}

	compressed, err := base64.StdEncoding.DecodeString(raw)
	if err != nil {
		return nil, err
	}

	var out bytes.Buffer
	buf := bytes.NewBuffer(compressed)
	
	r, err := gzip.NewReader(buf)
	if err != nil {
		return nil, err
	}

	if _, err := io.Copy(&out, r); err != nil {
		return nil, err
	}

	return out.Bytes(), nil
}
